#!/bin/sh
#reboot if traces of OOM killer are found

: "${RUNDIR:="/run"}"
: "${REBOOT_CMD:=""}"

export PATH="/bin:/sbin/:/usr/bin:/usr/sbin"

this="$(basename "$0")"
reboot_marker_file="$RUNDIR/${this}.REBOOT-REQUESTED"

msg() { printf '(%s): %s\n' "$this" "$@"; }

grep_for_traces_of_oom_killer() {
	grep -q \
		-e "oom_reaper:" \
		-e "invoked oom-killer:" \
		-e "oom-kill:" \
		-e "Kill process" \
		-e "Killed process" \
		-e "Out of memory and no killable processes" \
		"$@"
}

reboot_cmd=
reboot_via_cmd() {
	[ -z "$reboot_cmd" ] && return

	msg "Rebooting via command"

	# fork it to not wait forever on the blocking call
	($reboot_cmd) &

	sleep 10
	msg "  WARNING: Reboot failed."
}

# availability of /proc/sysrq-trigger depends on CONFIG_MAGIC_SYSRQ
# ref: https://www.kernel.org/doc/html/latest/admin-guide/sysrq.html
sysrq_available=
reboot_via_sysrq() {
	[ -z "$sysrq_available" ] || return

	msg "Rebooting via sysrq-trigger"

	# make sure to have all functionality we need
	echo 1 >/proc/sys/kernel/sysrq

	# just in case, notify everyone
	# e: Send a SIGTERM to all processes, except for init.
	msg "  SIGTERM to all processes"
	echo e >/proc/sysrq-trigger
	sleep 1 #give everyone some time to exit

	# i: Send a SIGKILL to all processes, except for init.
	msg "  SIGKILL to all processes"
	echo i >/proc/sysrq-trigger
	sleep 1

	# b: Will immediately reboot the system without syncing or unmounting your disks.
	msg "  system reboot"
	echo b >/proc/sysrq-trigger
	sleep 1

	# last resort: instant kernel panic
	# c: perform a system crash by a NULL pointer dereference
	msg "  kernel panic"
	echo c >/proc/sysrq-trigger
	sleep 1

	msg "WARNING: System reboot via sysrq-trigger failed"
}

msg "Starting up"

mkdir -p "$RUNDIR"

# determine reboot command
if [ -n "$REBOOT_CMD" ]; then
	reboot_cmd="$REBOOT_CMD"
elif command -v reboot >/dev/null; then
	reboot_cmd="$(command -v reboot)"
elif command -v halt >/dev/null; then
	reboot_cmd="$(command -v halt) --reboot"
elif command -v systemctl >/dev/null; then
	reboot_cmd="$(command -v systemctl) reboot"
else
	msg "WARNING: No suitable reboot command" >&2
fi
[ -n "$reboot_cmd" ] && msg "Using command: '$reboot_cmd'"

# determine sysrq availability
if [ ! -f /proc/sysrq-trigger ]; then
	msg "HINT: /proc/sysrq is not available" >&2
else
	sysrq_available=y
fi

if [ -z "$reboot_cmd" ] && [ -z "$sysrq_available" ]; then
	msg "ERROR: don't know how to reboot" >&2
	exit 1
fi

# did we try to reboot already? (maybe got killed by OOM)
found_oom=
if [ -f "$reboot_marker_file" ]; then
	msg "WARNING: Reboot marker is present. It seems we were unable to reboot the last time?"
	found_oom=y
fi

while [ -z "$found_oom" ]; do
	# search for traces of OOM killer activity in the usual places.  Take
	# /var/log into account as well, as dmesg ring buffer might be cleared.
	if dmesg | grep_for_traces_of_oom_killer -; then
		msg "Found traces of OOM killer activity in dmesg"
		found_oom=y
	# NOTE: before enabling this branch, ensure no old traces in kernel.log lead
	# to reboot loop
	#elif grep_oom_killer_traces /var/log/kernel.log; then
	#	msg "Found traces of OOM killer activity in /var/log/kernel.log
	#	break
	else
		sleep 15
	fi
done

echo 1 >"$reboot_marker_file"

# nicely ask for reboot
reboot_via_cmd

# asking nicely failed, let's try the hard way
reboot_via_sysrq

msg "System is still alive and we're unable to reboot it."
msg "Good luck :-/"
